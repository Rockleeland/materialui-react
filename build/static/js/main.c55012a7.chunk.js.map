{"version":3,"sources":["WaterView.js","Count.js","App.js","serviceWorker.js","index.js"],"names":["WaterView","props","react_default","a","createElement","onClick","toggle","hideShow","style","waterForm","Count","state","count","view","increment","_this","setState","decrement","containerView","backgroundColor","src_WaterView","this","Component","App","className","Count_Count","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+NAceA,EAZG,SAACC,GAGf,OACAC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAQC,QAASJ,EAAMK,QAASL,EAAMM,SAAtC,SACAL,EAAAC,EAAAC,cAAA,OAAKI,MAAOP,EAAMO,OAAQP,EAAMQ,aCLnBC,6MACnBC,MAAQ,CACNC,MAAO,EACPC,MAAM,KAGRC,UAAY,WACVC,EAAKC,SAAS,CACZJ,MAAOG,EAAKJ,MAAMC,MAAQ,QAI9BK,UAAY,WACVF,EAAKC,SAAS,CACZJ,MAAOG,EAAKJ,MAAMC,MAAQ,QAI9BN,OAAS,WACPS,EAAKC,SAAS,CACZH,MAAOE,EAAKJ,MAAME,UAItBK,cAAgB,WACd,IAAIV,EAAQ,CACVW,gBAAiB,QAEnB,OAAIJ,EAAKJ,MAAMC,OAAS,IAAMG,EAAKJ,MAAME,MACvCL,EAAQ,CACNW,gBAAiB,WAIjBjB,EAAAC,EAAAC,cAACgB,EAAD,CACId,OAAQS,EAAKT,OACbC,SAAS,OACTC,MAAOA,EACPC,UAAU,SAIdM,EAAKJ,MAAME,KAGXX,EAAAC,EAAAC,cAACgB,EAAD,CACId,OAAQS,EAAKT,OACbC,SAAS,OACTC,MAAOA,EACPC,UAAU,UAIXP,EAAAC,EAAAC,cAAA,UAAQC,QAASU,EAAKT,QAAtB,sFAIP,OACEJ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQC,QAASgB,KAAKP,WAAtB,OACAZ,EAAAC,EAAAC,cAAA,UAAQC,QAASgB,KAAKJ,WAAtB,OACAf,EAAAC,EAAAC,cAAA,SAAIiB,KAAKV,MAAMC,OACfV,EAAAC,EAAAC,cAAA,WAAMiB,KAAKH,yBA9DgBI,aCSpBC,MARf,WACE,OACErB,EAAAC,EAAAC,cAAA,OAAKoB,UAAU,OACbtB,EAAAC,EAAAC,cAACqB,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c55012a7.chunk.js","sourcesContent":["import React from 'react';\n\nconst WaterView = (props) => {\n    //reusable functional component that changes \n    //depending on the parent stateful component\n    return (\n    <div>\n        <button onClick={props.toggle}>{props.hideShow} div!</button>\n        <div style={props.style}>{props.waterForm}</div>\n    </div>\n    )\n\n}\n\nexport default WaterView;","import React, { Component } from \"react\";\nimport WaterView from \"./WaterView\";\n\nexport default class Count extends Component {\n  state = {\n    count: 0,\n    view: false\n  };\n\n  increment = () => {\n    this.setState({\n      count: this.state.count + 32\n    });\n  };\n\n  decrement = () => {\n    this.setState({\n      count: this.state.count - 32\n    });\n  };\n\n  toggle = () => {\n    this.setState({\n      view: !this.state.view\n    });\n  };\n\n  containerView = () => {\n    let style = {\n      backgroundColor: \"blue\"\n    };\n    if (this.state.count <= 32 && this.state.view) {\n      style = {\n        backgroundColor: \"#aad4e5\"\n      };\n      return (\n      //passing props to functional component\n        <WaterView \n            toggle={this.toggle} \n            hideShow=\"Hide\" \n            style={style} \n            waterForm='Ice'\n        />\n      )\n    }\n    if (this.state.view) {\n    //passing props to functional component\n      return (\n        <WaterView \n            toggle={this.toggle} \n            hideShow=\"Hide\" \n            style={style} \n            waterForm='Water'\n        />\n      )\n    }\n    return <button onClick={this.toggle}>Show div!</button>;\n  };\n\n  render() {\n    return (\n      <div>\n        <button onClick={this.increment}>+32</button>\n        <button onClick={this.decrement}>-32</button>\n        <p>{this.state.count}</p>\n        <div>{this.containerView()}</div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport Count from './Count'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Count />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}